/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package yngMain;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;


public class students extends javax.swing.JFrame {

    Connection conn;
    PreparedStatement pst,pst1;
    ResultSet rs,rs1;
    
    public ImageIcon logo = new ImageIcon(getClass().getResource("/img/logo.png"));
    public String empId;
    
    static final String USERNAME = "root";
    static final String PASSWORD = "";
    static final String DATACONN = "jdbc:mysql://localhost/sql12655413";
    
    public students() {
        initComponents();
        conn = (com.mysql.jdbc.Connection) con();
        setResizable(false);
        setTitle("Students List");
        setIconImage(logo.getImage()); 
        studentList();
        vital();
    }
    
    void vital(){
        tid.setVisible(false);
        forStud.setVisible(false);
        forSub.setVisible(false);
        forEmp.setVisible(false);
        klass.setVisible(false);
        studentunitsId.setVisible(false);
        subjectsId.setVisible(false);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer(); // create a renderer
        centerRenderer.setHorizontalAlignment(JLabel.CENTER); // set its alignment
        students.setDefaultRenderer(Object.class, centerRenderer);
    }
    
    public final Connection con(){
        try{
            conn = (com.mysql.jdbc.Connection) DriverManager.getConnection(DATACONN,USERNAME,PASSWORD);
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
        return conn;
        
    }
    
    
    public void studentList(){
        try{
            pst = conn.prepareStatement("SELECT * FROM studentunits inner join subjects on "
                    + "subjects.subjectId = studentunits.subjectId inner join studentdata on "
                    + "studentunits.studentId = studentdata.studentId inner join schedule on "
                    + "studentunits.scheduleId = schedule.scheduleId inner join course on "
                    + "course.courseId = studentdata.courseId "
                    + "where schedule.employeeId = ? and schedule.subjectId = ? order by studentdata.lastName asc");
            pst.setString(1,tid.getText());
            pst.setString(2,subjectsId.getText());
            
            rs = pst.executeQuery();
            java.sql.ResultSetMetaData rsmd = rs.getMetaData();
            int n = rsmd.getColumnCount();
            DefaultTableModel dtm=(DefaultTableModel) students.getModel();
            dtm.setRowCount(0);
            while (rs.next()){
                //System.out.println(rs.getString("subjectId"));
                Vector v = new Vector();
                for(int i=1;i<=n;i++){
                    String forSem=null;
                    if(rs.getString("studentunits.semester").equals("1")){
                        forSem = "1st Semester";
                    }else 
                    if(rs.getString("studentunits.semester").equals("2")){
                        forSem = "2nd Semester";
                    }
                    v.add(rs.getString("suId"));
                    v.add(rs.getString("studentdata.studentId"));
                    v.add(rs.getString("lastName") + ", " + rs.getString("firstName")+" "+rs.getString("middleName"));
                    v.add(rs.getString("acronym")+ " "+rs.getInt("studentunits.year")+ " - "+ forSem);
                    v.add(rs.getString("schedule.scheduleId"));
                    
                    System.out.println(rs.getString("lastName") + " added.");
                }
                dtm.addRow(v);
            }
            
            
        }catch (SQLException ex) {
           System.out.println(ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        students = new javax.swing.JTable();
        note1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        studentunitsId = new javax.swing.JLabel();
        subjectsId = new javax.swing.JLabel();
        tid = new javax.swing.JLabel();
        toGrades = new javax.swing.JButton();
        forSub = new javax.swing.JLabel();
        forStud = new javax.swing.JLabel();
        forEmp = new javax.swing.JLabel();
        klass = new javax.swing.JLabel();
        n = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 500));
        setSize(new java.awt.Dimension(900, 500));
        getContentPane().setLayout(null);

        students.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "studentunitsId", "studentId", "Student Name", "Course & Year", "Schedule"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        students.setRowHeight(30);
        students.getTableHeader().setReorderingAllowed(false);
        students.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(students);
        if (students.getColumnModel().getColumnCount() > 0) {
            students.getColumnModel().getColumn(0).setMinWidth(0);
            students.getColumnModel().getColumn(0).setPreferredWidth(0);
            students.getColumnModel().getColumn(0).setMaxWidth(0);
            students.getColumnModel().getColumn(1).setMinWidth(0);
            students.getColumnModel().getColumn(1).setPreferredWidth(0);
            students.getColumnModel().getColumn(1).setMaxWidth(0);
            students.getColumnModel().getColumn(4).setMinWidth(0);
            students.getColumnModel().getColumn(4).setPreferredWidth(0);
            students.getColumnModel().getColumn(4).setMaxWidth(0);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 50, 840, 350);

        note1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        note1.setText("Student List");
        note1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().add(note1);
        note1.setBounds(20, 10, 450, 30);

        jButton4.setText("Search");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(750, 10, 100, 30);
        getContentPane().add(studentunitsId);
        studentunitsId.setBounds(170, 420, 170, 30);
        getContentPane().add(subjectsId);
        subjectsId.setBounds(360, 420, 170, 30);
        getContentPane().add(tid);
        tid.setBounds(0, 0, 140, 30);

        toGrades.setText("Encode Grades");
        toGrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toGradesActionPerformed(evt);
            }
        });
        getContentPane().add(toGrades);
        toGrades.setBounds(700, 410, 150, 30);
        getContentPane().add(forSub);
        forSub.setBounds(10, 430, 90, 20);
        getContentPane().add(forStud);
        forStud.setBounds(10, 400, 90, 20);
        getContentPane().add(forEmp);
        forEmp.setBounds(250, 400, 90, 20);
        getContentPane().add(klass);
        klass.setBounds(250, 460, 90, 20);

        n.setText("Search by Name");
        n.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nFocusLost(evt);
            }
        });
        getContentPane().add(n);
        n.setBounds(480, 10, 260, 30);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String name = n.getText();
        if(name.isEmpty()){
            JOptionPane.showMessageDialog(null,"Student Name is Required.");studentList();
        }else
            if(name.equals("Search by Name")){
            JOptionPane.showMessageDialog(null,"Student Name is Required.");studentList();
        }
        else{
            try{
                pst = conn.prepareStatement("SELECT * FROM studentunits inner join subjects on "
                        + "subjects.subjectId = studentunits.subjectId inner join studentdata on "
                        + "studentunits.studentId = studentdata.studentId inner join schedule on "
                        + "studentunits.scheduleId = schedule.scheduleId inner join course on "
                        + "course.courseId = studentdata.courseId "
                        + "where schedule.employeeId = ? and schedule.subjectId = ? and (firstName like ? or lastName like ?) order by studentdata.lastName asc");
                pst.setString(1,tid.getText());
                pst.setString(2,subjectsId.getText());
                pst.setString(3,"%"+n.getText()+"%");
                pst.setString(4,"%"+n.getText()+"%");

                rs = pst.executeQuery();
                java.sql.ResultSetMetaData rsmd = rs.getMetaData();
                int n = rsmd.getColumnCount();
                DefaultTableModel dtm=(DefaultTableModel) students.getModel();
                dtm.setRowCount(0);
                while (rs.next()){
                    //System.out.println(rs.getString("subjectId"));
                    Vector v = new Vector();
                    for(int i=1;i<=n;i++){
                        String forSem=null;
                        if(rs.getString("studentunits.semester").equals("1")){
                            forSem = "1st Semester";
                        }else 
                        if(rs.getString("studentunits.semester").equals("2")){
                            forSem = "2nd Semester";
                        }
                        v.add(rs.getString("suId"));
                        v.add(rs.getString("studentdata.studentId"));
                        v.add(rs.getString("lastName") + ", " + rs.getString("firstName")+" "+rs.getString("middleName"));
                        v.add(rs.getString("acronym")+ " "+rs.getInt("studentunits.year")+ " - "+ forSem);
                        v.add(rs.getString("schedule.scheduleId"));
                        
                        System.out.println(rs.getString("lastName") + " added.");
                    }
                    dtm.addRow(v);
                }


            }catch (SQLException ex) {
               System.out.println(ex);
            }
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed
    String schedId;
    private void studentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentsMouseClicked
            DefaultTableModel dtm = (DefaultTableModel)students.getModel();
            int si = students.getSelectedRow();
            forStud.setText(dtm.getValueAt(si, 1).toString());
            schedId = dtm.getValueAt(si,4).toString();
    }//GEN-LAST:event_studentsMouseClicked

    private void toGradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toGradesActionPerformed
        String fullname=null;
        String subject=null;
        try{
                pst = conn.prepareStatement("select * from studentdata where studentId = ?");
                pst.setString(1,forStud.getText());
                
                rs =pst.executeQuery();
                if(rs.next()){
                 fullname = rs.getString("lastName")+ ", "+rs.getString("firstName")+" "+rs.getString("middleName"); 
                }
                
                pst1 = conn.prepareStatement("select * from subjects where subjectId = ?");
                pst1.setString(1,subjectsId.getText());
                rs1 = pst1.executeQuery();
                
                if(rs1.next()){
                    subject = rs1.getString("subjectId");
                }
                
                grades togo = new grades();
                togo.studentId.setText(forStud.getText());
                System.out.println("FORSTUD FROM LISTS : "+forStud.getText());
                togo.studentName.setText(fullname);
                togo.subjectId.setText(subject);
                System.out.println("FORSUBJECT FROM LISTS : "+ subject);
                togo.subjectdesc.setText(forSub.getText());
                togo.EMPID.setText(forEmp.getText());
                togo.skedyul.setText(schedId);
                togo.klase.setText(klass.getText());
                togo.refresh();
                togo.setVisible(true);
                
            }catch(Exception e){
                System.out.println(e);
            }

  
        System.out.println("Full Name: "+fullname);
        System.out.println("subject Id: "+subject);
    }//GEN-LAST:event_toGradesActionPerformed

    private void nFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nFocusGained
        String nn = "Search by Name";
        String tt = n.getText();
        if(tt.equals(nn)){
            n.setText(null);
        }
    }//GEN-LAST:event_nFocusGained

    private void nFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nFocusLost
       String nn = "Search by Name";
        String tt = n.getText();
        if(n.equals("")){
            n.setText(nn);
        }else if(n == null){
            n.setText(nn);
        }else if(tt.isEmpty()){
            n.setText(nn);
        }
    }//GEN-LAST:event_nFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("FlatLaf Light".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new students().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel forEmp;
    public javax.swing.JLabel forStud;
    public javax.swing.JLabel forSub;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel klass;
    private javax.swing.JTextField n;
    public javax.swing.JLabel note1;
    private javax.swing.JTable students;
    public javax.swing.JLabel studentunitsId;
    public javax.swing.JLabel subjectsId;
    public javax.swing.JLabel tid;
    private javax.swing.JButton toGrades;
    // End of variables declaration//GEN-END:variables
}
