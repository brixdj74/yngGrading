/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package yngMain;

import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.io.InputStream;
import static java.lang.ProcessBuilder.Redirect.from;
import static java.lang.ProcessBuilder.Redirect.to;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author brixd
 */
public class registrar extends javax.swing.JFrame {

    Connection conn;
    PreparedStatement pst,pst1;
    ResultSet rs,rs1;
    
    public ImageIcon logo = new ImageIcon(getClass().getResource("/img/logo.png"));
    
    public String empId;
    double p0;
    String g0;
    
    String query ="select * from studentdata "
                   + "inner join course on studentdata.courseId = course.courseId "
                   + "where enrollmentStatus = 'Enrolled'";
    static final String USERNAME = "root";
    static final String PASSWORD = "";
    static final String DATACONN = "jdbc:mysql://localhost/sql12655413";
    
    public registrar() {
        initComponents();
        setTitle("Grading System");
        setResizable(false);
        super.requestFocus();
        conn = (com.mysql.jdbc.Connection) con();
        setIconImage(logo.getImage()); 
        sort();good();complyId.setVisible(false);
        forCourse();
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer(); // create a renderer
        centerRenderer.setHorizontalAlignment(JLabel.CENTER); // set its alignment
        students.setDefaultRenderer(Object.class, centerRenderer);
        no.setVisible(false);
        no1.setVisible(false);
    }
    
    public final Connection con(){
        try{
            conn = (com.mysql.jdbc.Connection) DriverManager.getConnection(DATACONN,USERNAME,PASSWORD);
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
        return conn;
        
    }
    
    private void sort(){
        try{
            pst = conn.prepareStatement("select distinct * from course order by acronym asc");
            rs = pst.executeQuery();

            c.removeAllItems();
            c.addItem("Course");
            while(rs.next()){
                c.addItem(rs.getString("acronym"));
            }

        }
        catch(SQLException e){
            System.out.println(e);
        }
    }
    
    public void good(){
       try{
           pst = conn.prepareStatement(query);
           
           rs=pst.executeQuery();
           
           java.sql.ResultSetMetaData rsmd = rs.getMetaData();
            int n = rsmd.getColumnCount();
            DefaultTableModel dtm=(DefaultTableModel) students.getModel();
            dtm.setRowCount(0);
            while (rs.next()){
                Vector v = new Vector();
                for(int i=1;i<=n;i++){
                    v.add(rs.getString("studentId"));
                    v.add(rs.getString("lastName") + ", " + rs.getString("firstName")+" "+rs.getString("middleName"));
                    v.add(rs.getString("degree")+" in "+rs.getString("course"));
                    v.add(rs.getString("enrollType"));
                }
                dtm.addRow(v);
            }
           
       
       }catch(SQLException e){
           System.out.println(e);
       }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wc = new javax.swing.JLabel();
        regId = new javax.swing.JLabel();
        b2 = new javax.swing.JButton();
        b1 = new javax.swing.JButton();
        card = new javax.swing.JPanel();
        panel1 = new javax.swing.JPanel();
        s = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        students = new javax.swing.JTable();
        c = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        f2 = new javax.swing.JButton();
        rem = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        panel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        sid = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fn = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        forId = new javax.swing.JLabel();
        no1 = new javax.swing.JScrollPane();
        no = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        subid = new javax.swing.JLabel();
        cid = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ca = new javax.swing.JTextField();
        report = new javax.swing.JButton();
        sub = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        course = new javax.swing.JComboBox<>();
        desc = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        s1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTable();
        degree = new javax.swing.JLabel();
        cou = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        complyId = new javax.swing.JLabel();
        prelim = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        midterm = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        finals = new javax.swing.JTextField();
        subjectId = new javax.swing.JTextField();
        subjectdesc = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        regname = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        remarks = new javax.swing.JLabel();
        skedyul = new javax.swing.JLabel();
        EMPID = new javax.swing.JLabel();
        ave = new javax.swing.JLabel();
        gwa = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(900, 500));
        setSize(new java.awt.Dimension(900, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);
        getContentPane().add(wc);
        wc.setBounds(0, 480, 900, 20);
        getContentPane().add(regId);
        regId.setBounds(0, 470, 900, 10);

        b2.setText("Reports");
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });
        getContentPane().add(b2);
        b2.setBounds(160, 20, 160, 23);

        b1.setText("Students Lists");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });
        getContentPane().add(b1);
        b1.setBounds(20, 20, 130, 23);

        card.setBackground(new java.awt.Color(250, 250, 250));
        card.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        card.setLayout(new java.awt.CardLayout());

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setLayout(null);

        s.setText("Search Student");
        s.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sFocusLost(evt);
            }
        });
        s.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sActionPerformed(evt);
            }
        });
        panel1.add(s);
        s.setBounds(190, 10, 120, 22);

        jButton5.setText("Print");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        panel1.add(jButton5);
        jButton5.setBounds(755, 10, 80, 23);

        students.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Student Name", "Course", "Remarks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        students.setRowHeight(30);
        students.getTableHeader().setReorderingAllowed(false);
        students.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(students);
        if (students.getColumnModel().getColumnCount() > 0) {
            students.getColumnModel().getColumn(0).setMinWidth(130);
            students.getColumnModel().getColumn(0).setPreferredWidth(130);
            students.getColumnModel().getColumn(0).setMaxWidth(130);
            students.getColumnModel().getColumn(3).setMinWidth(150);
            students.getColumnModel().getColumn(3).setPreferredWidth(150);
            students.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        panel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 830, 330);

        c.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        panel1.add(c);
        c.setBounds(60, 10, 120, 22);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Sort by");
        panel1.add(jLabel1);
        jLabel1.setBounds(0, 10, 50, 20);

        f2.setText("Sort");
        f2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                f2ActionPerformed(evt);
            }
        });
        panel1.add(f2);
        f2.setBounds(320, 10, 72, 23);

        rem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Remarks", "Regular", "Irregular", "LGU", "4Ps" }));
        panel1.add(rem);
        rem.setBounds(440, 10, 90, 22);

        jButton7.setText("Sort");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        panel1.add(jButton7);
        jButton7.setBounds(540, 10, 80, 23);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("OR");
        panel1.add(jLabel9);
        jLabel9.setBounds(390, 10, 50, 20);

        card.add(panel1, "card2");

        panel2.setBackground(new java.awt.Color(255, 255, 255));
        panel2.setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setLayout(null);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(10, 90, 340, 10);

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(210, 60, 90, 23);

        sid.setText("YNGYYYY-XXXXX");
        sid.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sidFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sidFocusLost(evt);
            }
        });
        sid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sidActionPerformed(evt);
            }
        });
        sid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sidKeyPressed(evt);
            }
        });
        jPanel1.add(sid);
        sid.setBounds(10, 60, 190, 22);

        jLabel3.setText("Enter Student Identification Number");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 40, 320, 16);

        jLabel2.setText("Student Name");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 100, 320, 16);

        fn.setEditable(false);
        fn.setBackground(new java.awt.Color(255, 255, 255));
        fn.setText("Dela Cruz, Juan DC Jr");
        jPanel1.add(fn);
        fn.setBounds(10, 120, 190, 22);

        jButton6.setText("Generate COG");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6);
        jButton6.setBounds(210, 120, 140, 23);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Certificate of Grades");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(10, 10, 320, 16);

        panel2.add(jPanel1);
        jPanel1.setBounds(40, 30, 360, 160);

        forId.setText("jLabel4");
        panel2.add(forId);
        forId.setBounds(761, 360, 38, 0);

        no.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "Grades"
            }
        ));
        no1.setViewportView(no);

        panel2.add(no1);
        no1.setBounds(812, 12, 20, 350);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(null);

        subid.setText("subid");
        jPanel2.add(subid);
        subid.setBounds(280, 100, 70, 16);

        cid.setText("courseid");
        jPanel2.add(cid);
        cid.setBounds(277, 10, 70, 16);

        jLabel4.setText("Class Advisor");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(10, 100, 320, 16);

        ca.setText("Instructor Name");
        ca.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                caFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                caFocusLost(evt);
            }
        });
        jPanel2.add(ca);
        ca.setBounds(10, 120, 190, 22);

        report.setText("Generate Report");
        report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportActionPerformed(evt);
            }
        });
        jPanel2.add(report);
        report.setBounds(210, 120, 140, 23);

        sub.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Code" }));
        sub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subActionPerformed(evt);
            }
        });
        jPanel2.add(sub);
        sub.setBounds(10, 60, 100, 22);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Grade Summary Report");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(10, 10, 320, 16);
        jPanel2.add(jSeparator2);
        jSeparator2.setBounds(10, 90, 340, 10);

        course.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course" }));
        course.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseActionPerformed(evt);
            }
        });
        jPanel2.add(course);
        course.setBounds(10, 30, 250, 22);

        desc.setEditable(false);
        desc.setText("Description");
        jPanel2.add(desc);
        desc.setBounds(120, 60, 230, 22);

        jButton3.setText("Select");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);
        jButton3.setBounds(270, 30, 72, 23);

        panel2.add(jPanel2);
        jPanel2.setBounds(420, 30, 360, 160);

        display.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "SUBJECT", "PRELIM", "MIDTERM", "FINALS", "GWA", "REMARKS"
            }
        ));
        display.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayMouseClicked(evt);
            }
        });
        s1.setViewportView(display);
        if (display.getColumnModel().getColumnCount() > 0) {
            display.getColumnModel().getColumn(0).setMinWidth(0);
            display.getColumnModel().getColumn(0).setPreferredWidth(0);
            display.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        panel2.add(s1);
        s1.setBounds(42, 200, 360, 150);
        panel2.add(degree);
        degree.setBounds(280, 100, 70, 0);
        panel2.add(cou);
        cou.setBounds(280, 100, 70, 0);

        jPanel3.setLayout(null);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Compliance Form");
        jPanel3.add(jLabel10);
        jLabel10.setBounds(10, 10, 320, 16);

        complyId.setText("courseid");
        jPanel3.add(complyId);
        complyId.setBounds(277, 10, 70, 16);

        prelim.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        prelim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prelimActionPerformed(evt);
            }
        });
        jPanel3.add(prelim);
        prelim.setBounds(10, 120, 70, 22);

        jLabel11.setText("Prelim");
        jPanel3.add(jLabel11);
        jLabel11.setBounds(10, 100, 70, 16);

        jLabel19.setText("Midterm");
        jPanel3.add(jLabel19);
        jLabel19.setBounds(90, 100, 70, 16);

        midterm.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        midterm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midtermActionPerformed(evt);
            }
        });
        jPanel3.add(midterm);
        midterm.setBounds(90, 120, 70, 22);

        jLabel12.setText("Finals");
        jPanel3.add(jLabel12);
        jLabel12.setBounds(170, 100, 70, 16);

        finals.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        finals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalsActionPerformed(evt);
            }
        });
        jPanel3.add(finals);
        finals.setBounds(170, 120, 70, 22);

        subjectId.setEditable(false);
        subjectId.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.add(subjectId);
        subjectId.setBounds(10, 60, 70, 22);

        subjectdesc.setEditable(false);
        subjectdesc.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.add(subjectdesc);
        subjectdesc.setBounds(90, 60, 260, 22);

        jButton8.setText("Comply");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton8);
        jButton8.setBounds(250, 120, 100, 22);
        jPanel3.add(jSeparator3);
        jSeparator3.setBounds(10, 90, 340, 10);

        jLabel13.setText("Subject ID");
        jPanel3.add(jLabel13);
        jLabel13.setBounds(10, 40, 70, 16);

        jLabel20.setText("Description");
        jPanel3.add(jLabel20);
        jLabel20.setBounds(90, 40, 70, 16);

        panel2.add(jPanel3);
        jPanel3.setBounds(420, 200, 360, 150);

        card.add(panel2, "card2");

        getContentPane().add(card);
        card.setBounds(20, 60, 850, 380);

        jButton2.setText("Log Out");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(740, 20, 130, 23);
        getContentPane().add(regname);
        regname.setBounds(0, 470, 0, 0);

        jButton4.setText("Account");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(600, 20, 130, 23);
        getContentPane().add(remarks);
        remarks.setBounds(0, 0, 1, 10);

        skedyul.setText("jLabel1");
        getContentPane().add(skedyul);
        skedyul.setBounds(0, 0, 1, 10);

        EMPID.setText("jLabel1");
        getContentPane().add(EMPID);
        EMPID.setBounds(0, 0, 1, 10);
        getContentPane().add(ave);
        ave.setBounds(0, 0, 1, 10);
        getContentPane().add(gwa);
        gwa.setBounds(0, 0, 1, 10);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void studentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentsMouseClicked
        DefaultTableModel dtm = (DefaultTableModel)students.getModel();
        int si = students.getSelectedRow();
    }//GEN-LAST:event_studentsMouseClicked

    private void sFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sFocusGained
        // TODO add your handling code here:
        String ss = s.getText();
        
        if(ss.equals("Search Student")){
            s.setText(null);
        }
    }//GEN-LAST:event_sFocusGained

    private void sFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sFocusLost
        String ss = s.getText();
        
        if(ss.equals("")){
            s.setText("Search Student");
        }else if (ss.isEmpty()){
            s.setText("Search Student");
        }
    }//GEN-LAST:event_sFocusLost

    private void findStudent(){
        String ss = s.getText();
        try{
           pst = conn.prepareStatement("select * from studentdata "
                   + "inner join course on studentdata.courseId = course.courseId "
                   + "where enrollmentStatus = 'Enrolled' and (firstName like ? or lastName like ?)");
           pst.setString(1,"%"+ss+"%");
           pst.setString(2,"%"+ss+"%");
           
           rs=pst.executeQuery();
           
           java.sql.ResultSetMetaData rsmd = rs.getMetaData();
            int n = rsmd.getColumnCount();
            DefaultTableModel dtm=(DefaultTableModel) students.getModel();
            dtm.setRowCount(0);
            while (rs.next()){
                Vector v = new Vector();
                for(int i=1;i<=n;i++){
                    v.add(rs.getString("studentId"));
                    v.add(rs.getString("lastName") + ", " + rs.getString("firstName")+" "+rs.getString("middleName"));
                    v.add(rs.getString("degree")+" in "+rs.getString("course"));
                    v.add(rs.getString("enrollType"));
                }
                dtm.addRow(v);
            }
           
       
       }catch(SQLException e){
           System.out.println(e);
       }
    }
    
    private void sActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sActionPerformed
        String text = "Search Student";
        String now = s.getText();
        
        if(now.equals(text)){
            good();
        }else if(!now.equals(text)){
            findStudent();
        }
    }//GEN-LAST:event_sActionPerformed
    private void searchStudent(){
        String id = sid.getText();
        
        try{
            pst = conn.prepareStatement("select * from studentdata where studentId = ?");
            pst.setString(1,id);
            rs=pst.executeQuery();
            
            if(rs.next()){
                String f = rs.getString("firstName");
                String m = rs.getString("middleName");
                String l = rs.getString("lastName");
                String s = rs.getString("suffix");
                String full = l+", "+f+" "+m+" "+s;
                
                fn.setText(full);
                forId.setText(sid.getText());
            }
            
        }catch(SQLException e){
            System.out.println(e);
        }
        
        rep();
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        searchStudent();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        panel1.setVisible(false);
        panel2.setVisible(true);
    }//GEN-LAST:event_b2ActionPerformed

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        panel1.setVisible(true);
        panel2.setVisible(false);
    }//GEN-LAST:event_b1ActionPerformed

    private void sidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sidKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
           searchStudent();
        }
    }//GEN-LAST:event_sidKeyPressed

    private void sidFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sidFocusGained
        String k = sid.getText();
        
        if(k.equals("YNGYYYY-XXXXX")){
            sid.setText(null);
        }
    }//GEN-LAST:event_sidFocusGained

    private void sidFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sidFocusLost
        // TODO add your handling code here:
        String k = sid.getText();
        
        if(k.isEmpty()){
            sid.setText("YNGYYYY-XXXXX");
        }
    }//GEN-LAST:event_sidFocusLost

    private void sidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sidActionPerformed
int comeon =0;
int here = 0;
float awg=0;
float wag=0;

    private void rowCount(){
        try{
            pst = conn.prepareStatement("select * from grades "
                            + "inner join studentdata on grades.studentId = studentdata.studentId "
                            + "inner join subjects on subjects.subjectId = grades.subjectId "
                            + "inner join course on studentdata.courseId = course.courseId where approve = ? and grades.studentId = ?");
                    pst.setString(1,"Yes");
                    
                    pst.setString(2,forId.getText());
                    
                    rs = pst.executeQuery();
                    
                    java.sql.ResultSetMetaData rsmd = rs.getMetaData();
                    int n = rsmd.getColumnCount();
                    DefaultTableModel dtm=(DefaultTableModel) no.getModel();
                    dtm.setRowCount(0);
                    
                    while (rs.next()){
                        Vector v = new Vector();
                        for(int i=1;i<=n;i++){
                            double forge = Double.parseDouble(rs.getString("gwa"));
                            v.add(rs.getString("units"));
                            v.add(forge);
                        }
                        dtm.addRow(v);
                    }
        }catch(NumberFormatException | SQLException e){
            System.out.println(e);
        }
        
        
        DefaultTableModel tm = (DefaultTableModel)no.getModel();
        int tc = tm.getRowCount();
        while(comeon!=tc){
            
            String cou1 = tm.getValueAt(comeon,0).toString();
            String gwa1 = tm.getValueAt(comeon,1).toString();
            int cou = Integer.parseInt(cou1);
            double gwa = Double.parseDouble(gwa1);
            
            here+=cou;
            wag+=gwa;
            System.out.println("Processing~ "+here);
            
            comeon++;
            awg=wag/comeon;
            System.out.println("COUNTING FROM "+comeon);
            System.out.println("here is the units count "+here);
            System.out.println("here is the sum of grades "+wag);
            System.out.println("Here is the GWA "+awg);
            
        }
        
        
        
    }
    
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        rowCount();
        String rem=null;
        try {
                    pst = conn.prepareStatement("select * from grades "
                            + "inner join studentdata on grades.studentId = studentdata.studentId "
                            + "inner join subjects on subjects.subjectId = grades.subjectId "
                            + "inner join course on studentdata.courseId = course.courseId where approve = ? and grades.studentId = ?");
                    pst.setString(1,"Yes");
                    
                    pst.setString(2,forId.getText());
                    
                    rs = pst.executeQuery();
                    
                    if(awg<=3){
                        rem = "Passed";
                    }else{
                        rem = "Failed";
                    }
                    
                    String head=null;
                    if (rs.next()) {
                        
                        if(rs.getString("course").equals("Computer Technology")){
                            head= "Joy Reyes";
                        }else if(rs.getString("course").equals("Tourism Management")){
                            head= "Romeo Bernardo Jr";
                        }else if(rs.getString("course").equals("Criminology")){
                            head= "Allen Fausto";
                        }
                        
                            HashMap<String,Object> hm = new HashMap<String,Object>();
                            hm.put("studentId", forId.getText());
                            hm.put("studentName", fn.getText());
                            hm.put("degree", rs.getString("degree"));
                            hm.put("course",rs.getString("course"));
                            hm.put("sem",rs.getString("semester"));
                            hm.put("now","2023");
                            hm.put("next","2024");
                            hm.put("yearLevel",rs.getString("studentYear"));
                            hm.put("remarks",rem);
                            hm.put("ave",rs.getString("average"));
                            hm.put("registrar",regname.getText());
                            hm.put("head",head);
                            hm.put("units",""+here);
                            
                            hm.put("total",""+awg);
                            

                            InputStream is = registrar.class.getResourceAsStream("/setOSG/cog.jrxml");
                            JasperDesign jd = JRXmlLoader.load(is);

                            String sql= "select * from grades "
                                    + "inner join studentdata on grades.studentId = studentdata.studentId "
                                    + "inner join course on studentdata.courseId = course.courseId "
                                    + "inner join subjects on subjects.subjectId = grades.subjectId "
                                    + "where approve = 'Yes' and grades.studentId = '"+forId.getText()+"'";
                            
                            
                            
                            System.out.println(sql);
                            JRDesignQuery newQuery = new JRDesignQuery();
                            newQuery.setText(sql);
                            jd.setQuery(newQuery);

                            JasperReport jr = JasperCompileManager.compileReport(jd);
                            JasperPrint jp = JasperFillManager.fillReport(jr, hm, conn);
                            JasperViewer.viewReport(jp, false);

                    } else {
                        JOptionPane.showMessageDialog(null, "No Record Found!");  
                    }

                } catch (JRException | SQLException e) {
                    JOptionPane.showMessageDialog(null, e);
                    System.out.println(e);
                }
    }//GEN-LAST:event_jButton6ActionPerformed
    
    private void f2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f2ActionPerformed
        String dropdown = c.getSelectedItem().toString();
        String nc = "Course";
        
        String text = "Search Student";
        String now = s.getText();
        
        if(dropdown.equals(nc) && now.equals(text)){
           query = "select * from studentdata "
                   + "inner join course on studentdata.courseId = course.courseId "
                   + "where enrollmentStatus = 'Enrolled'";
            good();
            System.out.println("dito select all");
        }else if(dropdown.equals(nc) && !now.equals(text)){
            
           query = "select * from studentdata "
                   + "inner join course on studentdata.courseId = course.courseId "
                   + "where enrollmentStatus = 'Enrolled' and (firstName like '%"+now+"%' or lastName like '%"+now+"%')";
            good();
            System.out.println("all sa course pero may name sa search");
        }else if(!dropdown.equals(nc) && now.equals(text)){
            
            query = "select * from studentdata "
                   + "inner join course on studentdata.courseId = course.courseId "
                   + "where enrollmentStatus = 'Enrolled' and (acronym = '"+dropdown+"')";
            good();
            System.out.println("may naka select sa course pero wala sa search");
        }else if(!dropdown.equals(nc) && !now.equals(text)){
            
            query = "select * from studentdata "
                   + "inner join course on studentdata.courseId = course.courseId "
                   + "where enrollmentStatus = 'Enrolled' and (firstName like '%"+now+"%' or lastName like '%"+now+"%') and acronym = '"+dropdown+"'";
            good();
            System.out.println("parehas meron kaya where course = ? and name like ?");
        }
    }//GEN-LAST:event_f2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(JOptionPane.showConfirmDialog(null,"Confirm Log Out?","Log Out",JOptionPane.YES_OPTION)==JOptionPane.YES_OPTION){
            login back = new login();
            dispose();
            back.setVisible(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void rep(){
        try{
            pst = conn.prepareStatement("select * from grades "
                                    + "inner join studentdata on grades.studentId = studentdata.studentId "
                                    + "inner join course on studentdata.courseId = course.courseId "
                                    + "inner join subjects on subjects.subjectId = grades.subjectId "
                                    + "where approve = 'Yes' and grades.studentId = '"+forId.getText()+"'");
            rs=pst.executeQuery();
            System.out.println(pst);
            
            java.sql.ResultSetMetaData rsmd = rs.getMetaData();
            int n = rsmd.getColumnCount();
            DefaultTableModel dtm=(DefaultTableModel) display.getModel();
            dtm.setRowCount(0);
            while (rs.next()){
                Vector v = new Vector();
                for(int i=1;i<=n;i++){
                    v.add(rs.getString("gradesId"));
                    v.add(rs.getString("subjectId"));
                    
                    //v.add(rs.getString("lastName") + ", " + rs.getString("firstName")+" "+rs.getString("middleName"));
                    v.add(rs.getString("prelim"));
                    v.add(rs.getString("midterm"));
                    v.add(rs.getString("finals"));
                    v.add(rs.getString("gwa"));
                    v.add(rs.getString("remarks"));
                }
                dtm.addRow(v);
            }
            
            
        }catch(Exception e){
            System.out.println(e);
        }
    }
    private void reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportActionPerformed
          rep();
          
          try {
                    pst = conn.prepareStatement("select * from grades "
                    + "inner join studentdata on studentdata.studentId = grades.studentId "
                    + "inner join subjects on subjects.subjectId = grades.subjectId "
                    + "inner join schedule on grades.scheduleId = schedule.scheduleId "
                    + "where subjects.courseId = ? and grades.subjectId = ?");
                    pst.setString(1,cid.getText());
                    pst.setString(2,subid.getText());
                    rs=pst.executeQuery();
                    
                    if (rs.next()) {
                            HashMap<String,Object> hm = new HashMap<String,Object>();
                            hm.put("subject", desc.getText());
                            hm.put("degree", degree.getText());
                            hm.put("course",cou.getText());
                            hm.put("sem",rs.getString("semester"));
                            hm.put("now","2023");
                            hm.put("next","2024");
                            hm.put("advisor",ca.getText());
                            hm.put("registrar",regname.getText());
                            
                            InputStream is = registrar.class.getResourceAsStream("/setOSG/summary.jrxml");
                            JasperDesign jd = JRXmlLoader.load(is);

                            String sql= "select * from grades "
                            + "inner join studentdata on studentdata.studentId = grades.studentId "
                            + "inner join subjects on subjects.subjectId = grades.subjectId "
                            + "inner join schedule on grades.scheduleId = schedule.scheduleId "
                            + "where subjects.courseId = '"+cid.getText()+"' and grades.subjectId = '"+subid.getText()+"'";
                            
                            System.out.println(sql);
                            JRDesignQuery newQuery = new JRDesignQuery();
                            newQuery.setText(sql);
                            jd.setQuery(newQuery);

                            JasperReport jr = JasperCompileManager.compileReport(jd);
                            JasperPrint jp = JasperFillManager.fillReport(jr, hm, conn);
                            JasperViewer.viewReport(jp, false);

                    } else {
                        JOptionPane.showMessageDialog(null, "No Record Found!");  
                    }

                } catch (JRException | SQLException e) {
                    JOptionPane.showMessageDialog(null, e);
                    System.out.println(e);
                }
    }//GEN-LAST:event_reportActionPerformed
    
    String subto = null;
    
    private void subActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subActionPerformed
        
        try{
        subto = sub.getSelectedItem().toString();
        }
        catch(Exception e){
        }
        if(subto==(null)){
        }else if(subto.equals("Code")){
            System.out.println("Code");
        }else{
            System.out.println("Have");
            try{
                pst =conn.prepareStatement("select * from subjects where code =?");
                pst.setString(1,subto);
                
                rs=pst.executeQuery();
                if(rs.next()){
                    desc.setText(rs.getString("description"));
                    subid.setText(rs.getString("subjectId"));
                }
            }catch(Exception e){
                System.out.println(e);
            }
        }
        
    }//GEN-LAST:event_subActionPerformed

    public void forCourse(){
        try{
            pst = conn.prepareStatement("select * from course");
            rs = pst.executeQuery();
            
            course.removeAllItems();
            course.addItem("Select Course");
            while(rs.next()){
                course.addItem(rs.getString("acronym"));
            }
        }catch(SQLException e){
            System.out.println(e);
        }
    }
    public void forSub(){
        try{
            pst = conn.prepareStatement("select * from subjects "
                    + "inner join course on course.courseId = subjects.courseId "
                    + "where course.acronym = ?");
            pst.setString(1,course.getSelectedItem().toString());
            rs = pst.executeQuery();
            sub.removeAllItems();
            sub.addItem("Code");
            while(rs.next()){
                sub.addItem(rs.getString("code"));
            }
        }catch(SQLException e){
            System.out.println(e);
        }
    }
    private void courseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseActionPerformed
       
        
    }//GEN-LAST:event_courseActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(Arrays.toString(course.getSelectedObjects()).equals("Select Course")){
            JOptionPane.showMessageDialog(null,"Course is required!");
        }else{
            
            
        try{
            forSub();
            
            pst = conn.prepareStatement("select * from course where acronym = ?");
            pst.setString(1,course.getSelectedItem().toString());
            
            rs = pst.executeQuery();
            
            if(rs.next()){
                cid.setText(rs.getString("courseId"));
                degree.setText(rs.getString("degree"));
                cou.setText(rs.getString("course"));
                System.out.println(degree.getText()+" - "+cou.getText());
            }
            
        }catch(SQLException e){
            System.out.println(e);
        }}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void caFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_caFocusGained
        String in = "Instructor Name";
        String out = ca.getText();
        
        if(out.equals(in)){
            ca.setText(null);
        }
    }//GEN-LAST:event_caFocusGained

    private void caFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_caFocusLost
        // TODO add your handling code here:
        if(ca.getText() == null){
            ca.setText("Instructor Name");
        }
    }//GEN-LAST:event_caFocusLost

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
         String sel = c.getSelectedItem().toString();
         String tint=null;
         if(c.getSelectedItem().toString().equals("Course")){
             tint = "";
         }else{
             tint = sel;
         }
         
        String title = "SET Grading System - "+ tint +" Students List";

        MessageFormat f= new MessageFormat("SET Grading System 2023 - Copyright reserved.");
        MessageFormat h= new MessageFormat(title);
        
        
        if(JOptionPane.showConfirmDialog(null,"Print Students List?","Print",JOptionPane.YES_OPTION)==JOptionPane.YES_OPTION){
            try {
                students.print(JTable.PrintMode.FIT_WIDTH, h,f);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        account acc = new account();
        acc.id.setText(regId.getText());
        acc.setVisible(true);
        acc.ac();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try{
        
        String remarks = rem.getSelectedItem().toString();
        
        if(remarks.equals("Remarks")){
            query = "select * from studentdata "
                   + "inner join course on studentdata.courseId = course.courseId "
                   + "where enrollmentStatus = 'Enrolled'";
            good();
        }else{
            query = "select * from studentdata "
                   + "inner join course on studentdata.courseId = course.courseId "
                   + "where enrollmentStatus = 'Enrolled' and enrollType = '"+remarks+"'";
            good();
        }
        
        }
        catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    void comp(){
        try{
        
        if(prelim.getText().equals("")){
            prelim.setText("0");
        }
        if(midterm.getText().equals("")){
            midterm.setText("0");
        }
        if(finals.getText().equals("")){
            finals.setText("0");
        }
        
            
        double PRELIM = Double.parseDouble(prelim.getText());
        double MIDTERM = Double.parseDouble(midterm.getText());
        double FINALS = Double.parseDouble(finals.getText());
        double p1 = ((PRELIM * .3));
        double p2 = ((MIDTERM * .3));
        double p3 = ((FINALS * .4));
        p0 = (p1+p2+p3);
        ave.setText(""+p0);
        
        if(p0>=74.5){
            remarks.setText("Passed");
        }else{
            remarks.setText("Failed");
        }
        
        if(p0>=96.5 && p0<=100){
            g0 ="1";
        }else if(p0>=93.5 && p0<96.5){
            g0 ="1.25";
        }else if(p0>=90.5 && p0<93.5){
            g0 ="1.5";
        }else if(p0>=87.5 && p0<90.5){
            g0 ="1.75";
        }else if(p0>=84.5 && p0<87.5){
            g0 ="2";
        }else if(p0>=81.5 && p0<84.5){
            g0 ="2.25";
        }else if(p0>=78.5 && p0<81.5){
            g0 ="2.5";
        }else if(p0>=75.5 && p0<78.5){
            g0 ="2.75";
        }else if(p0>=74.5 && p0<75.5){
            g0 ="3";
        }else if(p0<74.5 && p0>74){
            g0 ="5";
        }else {
            g0= "INC";
        }
        gwa.setText(g0);
        
        System.out.println("Prelim - "+ p1);
        System.out.println("Midterm - "+ p2);
        System.out.println("Finals - "+ p3);
        System.out.println("Average - " + p0);
        System.out.println("GWA - " + g0);
        System.out.println("Remarks: " + remarks.getText());
        System.out.println("Instructor: "+ EMPID.getText());
        System.out.println("Schedule iD: "+skedyul.getText());
        }
        catch(NumberFormatException e){
            System.out.println(e);
        }
    }
    
    private void prelimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prelimActionPerformed
        comp();
    }//GEN-LAST:event_prelimActionPerformed

    private void midtermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midtermActionPerformed
        comp();
    }//GEN-LAST:event_midtermActionPerformed

    private void finalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalsActionPerformed
        comp();
    }//GEN-LAST:event_finalsActionPerformed

    private void displayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayMouseClicked
        try{
            DefaultTableModel dtm = (DefaultTableModel) display.getModel();
            int get = display.getSelectedRow();
            int git = Integer.parseInt(dtm.getValueAt(get, 0).toString());
            
            
            pst = conn.prepareStatement("select * from grades inner join subjects on subjects.subjectId = grades.subjectId where gradesId = ?");
            pst.setInt(1,git);
            rs = pst.executeQuery();
            
            if(rs.next()){
                subjectId.setText(rs.getString("subjectId"));
                subjectdesc.setText(rs.getString("description"));
                prelim.setText(""+rs.getDouble("prelim"));
                midterm.setText(""+rs.getDouble("midterm"));
                finals.setText(""+rs.getDouble("finals"));
                complyId.setText(""+rs.getInt("gradesId"));
            }
            
            
            
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_displayMouseClicked

    private void compliance(){
        try{
            pst = conn.prepareStatement("update grades set prelim=?,midterm=?,finals=?,average=?,gwa=?,remarks=? where gradesId = ?");
            pst.setString(1,prelim.getText());
            pst.setString(2,midterm.getText());
            pst.setString(3,finals.getText());
            pst.setDouble(4,p0);
            pst.setString(5,g0);
            pst.setString(6,"Complied");
            pst.setString(7,complyId.getText());
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Compliance Success.");
            rep();
        }catch(Exception e){
            System.out.println(e);
        }
        
    }
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        
        if(JOptionPane.showConfirmDialog(null,"Confirm Compliance?","Compliance",0)==0){
            compliance();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Confirm Exit?","Exit",0)==0){
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("FlatLaf Light".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(registrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(registrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(registrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(registrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new registrar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel EMPID;
    private javax.swing.JLabel ave;
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JComboBox<String> c;
    private javax.swing.JTextField ca;
    private javax.swing.JPanel card;
    private javax.swing.JLabel cid;
    private javax.swing.JLabel complyId;
    private javax.swing.JLabel cou;
    private javax.swing.JComboBox<String> course;
    private javax.swing.JLabel degree;
    private javax.swing.JTextField desc;
    private javax.swing.JTable display;
    private javax.swing.JButton f2;
    public javax.swing.JTextField finals;
    private javax.swing.JTextField fn;
    private javax.swing.JLabel forId;
    private javax.swing.JLabel gwa;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    public javax.swing.JTextField midterm;
    private javax.swing.JTable no;
    private javax.swing.JScrollPane no1;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panel2;
    public javax.swing.JTextField prelim;
    public javax.swing.JLabel regId;
    public javax.swing.JLabel regname;
    private javax.swing.JComboBox<String> rem;
    private javax.swing.JLabel remarks;
    private javax.swing.JButton report;
    private javax.swing.JTextField s;
    private javax.swing.JScrollPane s1;
    private javax.swing.JTextField sid;
    public javax.swing.JLabel skedyul;
    private javax.swing.JTable students;
    private javax.swing.JComboBox<String> sub;
    private javax.swing.JLabel subid;
    public javax.swing.JTextField subjectId;
    public javax.swing.JTextField subjectdesc;
    public javax.swing.JLabel wc;
    // End of variables declaration//GEN-END:variables
}
